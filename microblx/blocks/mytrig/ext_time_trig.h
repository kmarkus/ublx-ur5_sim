/*
 * ext_time_trig microblx function block (autogenerated, don't edit)
 */

#include <ubx.h>

UBX_MODULE_LICENSE_SPDX(BSD-3-Clause)



/* block meta information */
char ext_time_trig_meta[] =
	" { doc='',"
	"   realtime=true,"
	"}";

/* declaration of block configuration */
ubx_proto_config_t ext_time_trig_config[] = {
	{ 0 },
};

/* declaration port block ports */
ubx_proto_port_t ext_time_trig_ports[] = {
	{ .name="time", .in_type_name="double", .in_data_len=1, .doc="time flow signal"  },
	{ 0 },
};

/* declare a struct port_cache */
struct ext_time_trig_port_cache {
	ubx_port_t* time;
};

/* helper function to cache ports. call in init */
static void update_port_cache(ubx_block_t *b, struct ext_time_trig_port_cache *pc)
{
	pc->time = ubx_port_get(b, "time");
}

/* define safe accessors for the new types */


/* block operation forward declarations */
int ext_time_trig_init(ubx_block_t *b);
int ext_time_trig_start(ubx_block_t *b);
void ext_time_trig_stop(ubx_block_t *b);
void ext_time_trig_cleanup(ubx_block_t *b);
void ext_time_trig_step(ubx_block_t *b);

ubx_proto_block_t ext_time_trig_block = {
	.name = "ext_time_trig",
	.type = BLOCK_TYPE_COMPUTATION,
	.meta_data = ext_time_trig_meta,
	.configs = ext_time_trig_config,
	.ports = ext_time_trig_ports,

	/* ops */
	.init = ext_time_trig_init,
	.start = ext_time_trig_start,
	.stop = ext_time_trig_stop,
	.cleanup = ext_time_trig_cleanup,
	.step = ext_time_trig_step,
};


/* ext_time_trig module init and cleanup functions */
int ext_time_trig_mod_init(ubx_node_t* nd)
{
	return ubx_block_register(nd, &ext_time_trig_block);
}

void ext_time_trig_mod_cleanup(ubx_node_t *nd)
{
	ubx_block_unregister(nd, "ext_time_trig");
}

/* declare module init and cleanup functions, so that the ubx core can
 * find these when the module is loaded/unloaded */
UBX_MODULE_INIT(ext_time_trig_mod_init)
UBX_MODULE_CLEANUP(ext_time_trig_mod_cleanup)
